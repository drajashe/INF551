xpath

a.)

xpath - string(/nutrition//food[contains( .,'Chicken')]/calories/@total)
ans -
410

b.)

xpath -/nutrition//food[vitamins[c>0]]/name/text()
ans -
Beef Frankfurter, Quarter Pound
Chicken Pot Pie
Cole Slaw
Potato Chips


c.)
xpath -/nutrition//food[vitamins[a>0 and c>0]]/name/text()
ans-
Chicken Pot Pie
Cole Slaw'

d.)
xpath -/nutrition//food[(total-fat) > 0 and (( saturated-fat) >= (0.5*total-fat))]/name/text()

ans-
Truffles, Dark Chocolate


e.)
xquery-
declare option saxon:output "omit-xml-declaration=yes";
(for $x in //food
order by number($x/cholesterol) descending
return $x/name/text())[1]

let $a:= max(//food[cholesterol)
return //food[cholesterol]=$a/name/text()


ans
Eggs


f.)
xquery

declare option saxon:output "omit-xml-declaration=yes";
<result>
{
for $x in //food
where $x/minerals/ca > 0
return <food>{$x/name, $x/total-fat }</food>
}
</result>

ans

<result>
   <food>
      <name>Bagels, New York Style </name>
      <total-fat>4</total-fat>
   </food>
   <food>
      <name>Beef Frankfurter, Quarter Pound </name>
      <total-fat>32</total-fat>
   </food>
   <food>
      <name>Chicken Pot Pie</name>
      <total-fat>22</total-fat>
   </food>
   <food>
      <name>Cole Slaw</name>
      <total-fat>0</total-fat>
   </food>
   <food>
      <name>Eggs</name>
      <total-fat>4.5</total-fat>
   </food>
   <food>
      <name>Hazelnut Spread</name>
      <total-fat>10</total-fat>
   </food>
</result>


for $s in //food
let $x:= $s[minerals/ca]>0]
return  ($x/name ,$x/total-fat)
